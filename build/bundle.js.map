{"version":3,"sources":["webpack:///build/bundle.js","webpack:///webpack/bootstrap 760f0e9c48b217955941","webpack:///./js/app.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","getWeather","e","preventDefault","cityStateArr","cityState","value","split","city","state","weather","then","results","wuData","weatherData","push","pop","renderWeather","localStorage","setItem","JSON","stringify","submitWeather","reset","catch","err","error","createErrorMessage","header","insertAdjacentHTML","setTimeout","nextSibling","remove","addForecast","forecast","getSpot","spotId","data","error_response","content","form","firstElementChild","surfSpot","locationData","populateForecastList","item","spot","date","Date","localTimestamp","hrs","checkHour","getHours","day","getDate","month","getMonth","fadedStarRating","fadedRating","solidStarRating","solidRating","stars","ui","createStarRating","swell","minBreakingHeight","maxBreakingHeight","unit","components","primary","height","period","round5","direction","compassDirection","secondary","wind","speed","condition","temperature","forecastsList","innerHTML","forecasts","querySelectorAll","forecastsArr","Array","from","length","lastElementChild","document","forEach","windSpeed","windSpeedColor","iconURL","icon","icon_url","tempF","temp_f","tempC","temp_c","location","display_location","currentConditions","weatherWidget","classList","toggle","weatherInput","placeholder","startTime","today","mins","getMinutes","hh","getSeconds","checkTime","getElementById","x","Math","ceil","hour","amPM","removeSpot","target","contains","parentNode","removeFromLocalStorage","parentElement","previousSibling","textContent","toggleForecast","toggled","nextElementSibling","style","display","splice","showInformation","infoBox","triangle","changeUnits","querySelector","toggleChangelocation","msg","Forecast","UI","Weather","questionMark","weatherForecast","submitForecast","parse","getItem","addEventListener"],"mappings":"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","file":"build/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n// Declare class variables\nvar forecast = new Forecast();\nvar ui = new UI();\nvar weather = new Weather();\n\nvar header = document.querySelector('.header');\nvar time = document.querySelector('.timeContainer');\nvar content = document.querySelector('.content');\nvar form = document.querySelector('.form');\nvar questionMark = document.querySelector('.form__help');\nvar infoBox = document.querySelector('.info');\nvar triangle = document.querySelector('.triangle-down');\nvar weatherWidget = document.querySelector('.weather-widget');\nvar weatherForecast = document.querySelector('.weather-widget__forecast');\nvar submitWeather = document.getElementById('form__weather');\nvar weatherInput = document.querySelector('.form__input--weather');\nvar submitForecast = document.querySelector('#submit');\nvar forecastsList = document.getElementById('forecastsList');\nvar cityState = document.getElementById('weatherInput');\nvar spotId = document.getElementById('spot_id');\nvar name = document.getElementById('name');\nvar locationData = JSON.parse(localStorage.getItem('locationData')) || [];\nvar weatherData = JSON.parse(localStorage.getItem('weatherData')) || [];\n\n// State of display styling for toggleForecast event\nvar toggled = false;\n\n//Load all event Listener\nstartTime();\nloadEventListeners(); // locationData\nretrieveDataFromLS();\n\nfunction getWeather(e) {\n    e.preventDefault();\n    var cityStateArr = cityState.value.split(', ');\n    var city = cityStateArr[0];\n    var state = cityStateArr[1];\n\n    weather.getWeather(state, city).then(function (results) {\n\n        var wuData = {\n            state: state,\n            city: city\n        };\n\n        if (weatherData === []) {\n            weatherData.push(wuData);\n        } else {\n            weatherData.pop();\n            weatherData.push(wuData);\n        }\n\n        renderWeather(results);\n\n        localStorage.setItem('weatherData', JSON.stringify(weatherData));\n\n        submitWeather.reset();\n    }).catch(function (err) {\n        var error = createErrorMessage('Error: Could not find location. Please format as City, State');\n        header.insertAdjacentHTML('afterend', error);\n        setTimeout(function () {\n            header.nextSibling.remove();\n        }, 4000);\n\n        submitWeather.reset();\n    });\n}\n\n// Add Forecast To DOM\nfunction addForecast(e) {\n    forecast.getSpot(spotId.value).then(function (data) {\n        //Check if error message from API\n        if (data.forecast.error_response || name.value === '') {\n            var error = createErrorMessage('We could not find the location you entered. Please make sure you entered the correct Spot ID and all fields are filled out.');\n            content.insertAdjacentHTML('afterbegin', error);\n            form.reset();\n            setTimeout(function () {\n                content.firstElementChild.remove();\n            }, 4000);\n        } else {\n            // Create object to store in local storage\n            var surfSpot = {\n                \"spotId\": spotId.value,\n                \"name\": name.value\n            };\n            // Push data in to array for LS\n            locationData.push(surfSpot);\n            // Create HTML in DOM\n            populateForecastList(name.value, data);\n            //Set the items in local storage\n            localStorage.setItem('locationData', JSON.stringify(locationData));\n            //Reset the form\n            form.reset();\n        }\n    });\n\n    e.preventDefault();\n}\n\nfunction populateForecastList(name, data) {\n    //Loop through object containing forecasts\n    for (item in data.forecast) {\n        var spot = data.forecast[item],\n            date = new Date(spot.localTimestamp * 1000),\n            hrs = checkHour(date.getHours()),\n            day = date.getDate(),\n            month = date.getMonth() + 1,\n            fadedStarRating = spot.fadedRating,\n            solidStarRating = spot.solidRating,\n            stars = ui.createStarRating(solidStarRating, fadedStarRating);\n\n        // Load first forecast to the DOM including a container with forecast and spot information\n        if (item === '0') {\n            var _forecast = '\\n                <div class=\"forecast\" id=\"forecasts\">\\n                    <div class=\"forecast__container\">\\n                        <div class=\"forecast__title\">\\n                            <div class=\"forecast__title--name\">' + name + '</div>\\n                            <div class=\"forecast__title--remove\"><span class=\"forecast__delete\">&#10005;</span></div>\\n                        </div>\\n                        <div class=\"forecast__heading\">\\n                            <div class=\"forecast__heading--surf\">Surf</div>\\n                            <div class=\"forecast__heading--rating\">Rating</div>\\n                            <div class=\"forecast__heading--pswell\">Primary Swell</div>\\n                            <div class=\"forecast__heading--sswell\">Secondary Swell</div>\\n                            <div class=\"forecast__heading--wind\">Wind</div>\\n                            <div class=\"forecast__heading--weather\">Weather</div>\\n                        </div>\\n                        <div class=\"forecast__info\">\\n                            <div class=\"date\">' + hrs + ' ' + month + '/' + day + '</div>\\n                            <div class=\"swell-size\">' + spot.swell.minBreakingHeight + '-' + spot.swell.maxBreakingHeight + spot.swell.unit + '</div>\\n                            <div class=\"rating\">' + stars + '</div>\\n                            <div class=\"pswell-size\">' + spot.swell.components.primary.height + spot.swell.unit + '</div>\\n                            <div class=\"pswell-period\">' + spot.swell.components.primary.period + 's</div>\\n                            <div class=\"pswell-direction font-small\">\\n                                <div class=\"icon msw-swa msw-swa-' + round5(spot.swell.components.primary.direction) + '\"></div>\\n                                <span class=\"ml-small\">' + spot.swell.components.primary.compassDirection + '</span>\\n                            </div>\\n                            <div class=\"secswell-size\">' + (spot.swell.components.secondary ? spot.swell.components.secondary.height + ('' + spot.swell.unit) : '') + '</div>\\n                            <div class=\"secswell-period\">' + (spot.swell.components.secondary ? spot.swell.components.secondary.period + 's' : '') + '</div>\\n                            <div class=\"secswell-direction font-small\">\\n                                <div class=\"icon msw-swa msw-swa-' + (spot.swell.components.secondary ? round5(spot.swell.components.secondary.direction) : '') + '\"></div>\\n                                <span class=\"ml-small\">' + (spot.swell.components.secondary ? spot.swell.components.secondary.compassDirection : '') + '</span>\\n                            </div>\\n                            <div class=\"wind\">' + spot.wind.speed + spot.wind.unit + '</div>\\n                            <div class=\"wind-direction\">\\n                                <div class=\"icon msw-ssa msw-ssa-' + round5(spot.wind.direction) + '\"></div>\\n                            </div>\\n                            <div class=\"weather-symbol\">\\n                                <img src=\"http://cdnimages.magicseaweed.com/30x30/' + spot.condition.weather + '.png\" class=\"weather-icon\">\\n                            </div>\\n                            <div class=\"weather-condition\">' + spot.condition.temperature + spot.condition.unit + '</div>\\n                        </div>\\n                        <div class=\"forecast__expand\">\\n                            &or; View More &or;\\n                        </div>\\n                    </div>\\n                    <div class=\"forecast__extended\" id=\"extended\">\\n                    </div>\\n                </div>\\n                ';\n\n            // Add to the list if the list is empty\n            if (forecastsList.innerHTML === '') {\n                forecastsList.insertAdjacentHTML('afterbegin', _forecast);\n            } else {\n                // If the list is not empty add the forecast element to below existing elements\n                forecastsList.insertAdjacentHTML('beforeend', _forecast);\n            }\n        } else {\n            var _forecast2 = '<div class=\"forecast__info\">\\n                    <div class=\"date\">' + hrs + ' ' + month + '/' + day + '</div>\\n                    <div class=\"swell-size\">' + spot.swell.minBreakingHeight + '-' + spot.swell.maxBreakingHeight + spot.swell.unit + '</div>\\n                    <div class=\"rating\">' + stars + '</div>\\n                    <div class=\"pswell-size\">' + spot.swell.components.primary.height + spot.swell.unit + '</div>\\n                    <div class=\"pswell-period\">' + spot.swell.components.primary.period + 's</div>\\n                    <div class=\"pswell-direction font-small\">\\n                        <div class=\"icon msw-swa msw-swa-' + round5(spot.swell.components.primary.direction) + '\"></div>\\n                        <span class=\"ml-small\">' + spot.swell.components.primary.compassDirection + '</span>\\n                    </div>\\n                    <div class=\"secswell-size\">' + (spot.swell.components.secondary ? spot.swell.components.secondary.height + ('' + spot.swell.unit) : '') + '</div>\\n                    <div class=\"secswell-period\">' + (spot.swell.components.secondary ? spot.swell.components.secondary.period + 's' : '') + '</div>\\n                    <div class=\"secswell-direction font-small\">\\n                        <div class=\"icon msw-swa msw-swa-' + (spot.swell.components.secondary ? round5(spot.swell.components.secondary.direction) : '') + '\"></div>\\n                        <span class=\"ml-small\">' + (spot.swell.components.secondary ? spot.swell.components.secondary.compassDirection : '') + '</span>\\n                    </div>\\n                    <div class=\"wind\">' + spot.wind.speed + spot.wind.unit + '</div>\\n                    <div class=\"wind-direction\">\\n                        <div class=\"icon msw-ssa msw-ssa-' + round5(spot.wind.direction) + '\"></div>\\n                    </div>\\n                    <div class=\"weather-symbol\">\\n                        <img src=\"http://cdnimages.magicseaweed.com/30x30/' + spot.condition.weather + '.png\" class=\"weather-icon\">\\n                    </div>\\n                    <div class=\"weather-condition\">' + spot.condition.temperature + spot.condition.unit + '</div>\\n                </div>';\n\n            // Select all forecast elements in the forecast list\n            var forecasts = forecastsList.querySelectorAll('.forecast');\n            // Create an array of exisitng forecast elements\n            var forecastsArr = Array.from(forecasts);\n            //Add the forecast to the last array item's forecast__extended element\n            forecastsArr[forecastsArr.length - 1].lastElementChild.innerHTML += _forecast2;\n        }\n\n        // Change the background color of the wind icons\n        var windSpeeds = document.querySelectorAll('.wind');\n        windSpeeds.forEach(function (windSpeed) {\n            ui.windSpeedColor(windSpeed);\n        });\n    }\n}\n\nfunction renderWeather(data) {\n    var iconName = data.icon,\n        iconURL = data.icon_url,\n        tempF = data.temp_f,\n        tempC = data.temp_c,\n        location = data.display_location.city;\n\n    currentConditions = '\\n        <div class=\"weather-widget__weather\">\\n            <img src=\"' + iconURL + '\" alt=\"weather icon\"><img>\\n            <div class=\"weather-widget__weather--info\">\\n                <div class=\"weather-widget__weather--info-temp temp-f\">' + tempF + 'f</div>\\n                <div class=\"weather-widget__weather--info-temp temp-c display-none\">' + tempC + 'c</div>\\n                <div class=\"weather-widget__weather--info-location\">' + location + '</div>\\n            </div>\\n            <i class=\"material-icons\" style=\"font-size: 15px;\">mode_edit</i>\\n        </div>\\n    ';\n    if (weatherWidget.firstElementChild.innerHTML === '') {\n        weatherWidget.firstElementChild.innerHTML = currentConditions;\n    } else {\n        weatherWidget.firstElementChild.innerHTML = '';\n        weatherWidget.firstElementChild.innerHTML = currentConditions;\n    }\n\n    submitWeather.classList.toggle('display-none');\n    weatherInput.placeholder = \"Change Location\";\n}\n\nfunction retrieveDataFromLS() {\n    weatherData.forEach(function (cityState) {\n        weather.getWeather(cityState.state, cityState.city).then(function (results) {\n            renderWeather(results);\n        });\n    });\n\n    locationData.forEach(function (location) {\n        forecast.getSpot(location.spotId).then(function (data) {\n            populateForecastList(location.name, data);\n        });\n    });\n}\n\n// Functions for starting the time \nfunction startTime() {\n    var today = new Date(),\n        hrs = today.getHours(),\n        mins = today.getMinutes(),\n        secs = today.getSeconds(),\n        hh = hrs;\n\n    if (hrs > 12) {\n        hrs = hh - 12;\n    }\n    if (hrs == 0) {\n        hrs = 12;\n    }\n\n    mins = checkTime(mins);\n    document.getElementById('time').innerHTML = hrs + ':' + mins;\n\n    var t = setTimeout(startTime, 500);\n}\n\n// function to round wind and swell arrows to the nearest 5\nfunction round5(x) {\n    return Math.ceil(x / 5) * 5;\n}\n\n//Add 0 in front of minutes\nfunction checkTime(i) {\n    if (i < 10) {\n        i = '0' + i;\n    }; // add zero in front of numbers < 10\n    return i;\n}\n\n// Check whether it is am or pm\nfunction checkHour(hour) {\n    var hour = hour - 1;\n    var amPM = hour > 11 ? \"am\" : \"pm\";\n    if (hour > 12) {\n        hour -= 12;\n    } else if (hour == 0) {\n        hour = \"12\";\n    }\n    return hour + amPM;\n}\n\nfunction loadEventListeners() {\n    submitWeather.addEventListener('submit', getWeather);\n    weatherForecast.addEventListener('click', changeUnits);\n    weatherForecast.addEventListener('click', toggleChangelocation);\n    submitForecast.addEventListener('click', addForecast);\n    forecastsList.addEventListener('click', removeSpot);\n    forecastsList.addEventListener('click', toggleForecast);\n    questionMark.addEventListener('click', showInformation);\n}\n\n//Remove each forecast from the forecast list\nfunction removeSpot(e) {\n    if (e.target.classList.contains('forecast__delete')) {\n        //select the parent element with class of forecast\n        e.target.parentNode.parentNode.parentNode.parentNode.remove();\n        // selest the name submitted for the spot to locate index in local storage\n        removeFromLocalStorage(e.target.parentElement.previousSibling.previousSibling.textContent);\n    }\n}\n\n// Toggle the extended forecast open and closed\nfunction toggleForecast(e) {\n    if (e.target.classList.contains('forecast__expand')) {\n        if (toggled === false) {\n            e.target.parentNode.nextElementSibling.style.display = \"inline\";\n            e.target.innerHTML = \"&and; View Less &and;\";\n            toggled = true;\n        } else if (toggled === true) {\n            e.target.parentNode.nextElementSibling.style.display = \"none\";\n            e.target.innerHTML = \"&or; View More &or;\";\n            toggled = false;\n        }\n    }\n}\n\n// Remove forecast from local storage\nfunction removeFromLocalStorage(name) {\n    locationData.forEach(function (location, i) {\n        if (location.name === name) {\n            locationData.splice(i, 1);\n        }\n    });\n\n    localStorage.setItem('locationData', JSON.stringify(locationData));\n}\n\nfunction showInformation(e) {\n    infoBox.classList.toggle('visible');\n    triangle.classList.toggle('visible');\n}\n\nfunction changeUnits(e) {\n    var tempF = document.querySelector('.temp-f');\n    var tempC = document.querySelector('.temp-c');\n\n    if (e.target.classList.contains('weather-widget__weather--info-temp')) {\n        tempF.classList.toggle('display-none');\n        tempC.classList.toggle('display-none');\n    }\n}\n\nfunction toggleChangelocation(e) {\n    if (e.target.classList.contains('material-icons')) {\n        submitWeather.classList.toggle('display-none');\n    }\n}\n\nfunction createErrorMessage(msg) {\n    msg = '<div class=\"error-message\">' + msg + '</div>';\n    return msg;\n}\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// build/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 760f0e9c48b217955941","// Declare class variables\nconst forecast = new Forecast();\nconst ui = new UI();\nconst weather = new Weather();\n\nconst header = document.querySelector('.header');\nconst time = document.querySelector('.timeContainer')\nconst content = document.querySelector('.content');\nconst form = document.querySelector('.form');\nconst questionMark = document.querySelector('.form__help');\nconst infoBox = document.querySelector('.info');\nconst triangle = document.querySelector('.triangle-down');\nconst weatherWidget = document.querySelector('.weather-widget');\nconst weatherForecast = document.querySelector('.weather-widget__forecast');\nconst submitWeather = document.getElementById('form__weather');\nconst weatherInput = document.querySelector('.form__input--weather');\nconst submitForecast = document.querySelector('#submit');\nconst forecastsList = document.getElementById('forecastsList');\nconst cityState = document.getElementById('weatherInput');\nconst spotId = document.getElementById('spot_id');\nconst name = document.getElementById('name');\nconst locationData = JSON.parse(localStorage.getItem('locationData')) || [];\nconst weatherData = JSON.parse(localStorage.getItem('weatherData')) || [];\n\n\n\n\n// State of display styling for toggleForecast event\nlet toggled = false;\n\n//Load all event Listener\nstartTime();\nloadEventListeners(); // locationData\nretrieveDataFromLS();\n\n\nfunction getWeather(e) {\n    e.preventDefault();\n    const cityStateArr = cityState.value.split(', ');\n    const city = cityStateArr[0];\n    const state = cityStateArr[1];\n\n    weather.getWeather(state, city)\n    .then(results => {\n\n        const wuData = {\n            state,\n            city\n        };\n        \n        if(weatherData === []) {\n            weatherData.push(wuData);\n        } else {\n            weatherData.pop();\n            weatherData.push(wuData);\n        }\n\n        renderWeather(results);\n\n        localStorage.setItem('weatherData', JSON.stringify(weatherData));\n\n        submitWeather.reset();\n    })\n    .catch(err => {\n        const error = createErrorMessage('Error: Could not find location. Please format as City, State')\n        header.insertAdjacentHTML('afterend', error);\n        setTimeout(function() {\n            header.nextSibling.remove();\n        }, 4000);\n        \n        submitWeather.reset();\n    });\n}\n\n\n// Add Forecast To DOM\nfunction addForecast(e){\n    forecast.getSpot(spotId.value)\n        .then(data => {\n            //Check if error message from API\n            if(data.forecast.error_response || name.value === '') {\n                const error = createErrorMessage('We could not find the location you entered. Please make sure you entered the correct Spot ID and all fields are filled out.')\n                content.insertAdjacentHTML('afterbegin', error);\n                form.reset();\n                setTimeout(function() {\n                    content.firstElementChild.remove();\n                }, 4000);\n            } else {\n                // Create object to store in local storage\n                const surfSpot = {\n                    \"spotId\": spotId.value,\n                    \"name\": name.value\n                };\n                // Push data in to array for LS\n                locationData.push(surfSpot);\n                // Create HTML in DOM\n                populateForecastList(name.value, data);\n                //Set the items in local storage\n                localStorage.setItem('locationData', JSON.stringify(locationData));\n                //Reset the form\n                form.reset();\n            } \n        }); \n\n    e.preventDefault();          \n}\n\n\nfunction populateForecastList(name, data) {\n    //Loop through object containing forecasts\n    for(item in data.forecast) {\n        const spot = data.forecast[item],\n              date = new Date(spot.localTimestamp*1000),\n              hrs = checkHour(date.getHours()),\n              day = date.getDate(),\n              month = date.getMonth() + 1,\n              fadedStarRating = spot.fadedRating,\n              solidStarRating = spot.solidRating, \n              stars = ui.createStarRating(solidStarRating, fadedStarRating);\n\n        // Load first forecast to the DOM including a container with forecast and spot information\n        if(item ==='0') {\n            let forecast = `\n                <div class=\"forecast\" id=\"forecasts\">\n                    <div class=\"forecast__container\">\n                        <div class=\"forecast__title\">\n                            <div class=\"forecast__title--name\">${name}</div>\n                            <div class=\"forecast__title--remove\"><span class=\"forecast__delete\">&#10005;</span></div>\n                        </div>\n                        <div class=\"forecast__heading\">\n                            <div class=\"forecast__heading--surf\">Surf</div>\n                            <div class=\"forecast__heading--rating\">Rating</div>\n                            <div class=\"forecast__heading--pswell\">Primary Swell</div>\n                            <div class=\"forecast__heading--sswell\">Secondary Swell</div>\n                            <div class=\"forecast__heading--wind\">Wind</div>\n                            <div class=\"forecast__heading--weather\">Weather</div>\n                        </div>\n                        <div class=\"forecast__info\">\n                            <div class=\"date\">${hrs} ${month}/${day}</div>\n                            <div class=\"swell-size\">${spot.swell.minBreakingHeight}-${spot.swell.maxBreakingHeight}${spot.swell.unit}</div>\n                            <div class=\"rating\">${stars}</div>\n                            <div class=\"pswell-size\">${spot.swell.components.primary.height}${spot.swell.unit}</div>\n                            <div class=\"pswell-period\">${spot.swell.components.primary.period}s</div>\n                            <div class=\"pswell-direction font-small\">\n                                <div class=\"icon msw-swa msw-swa-${round5(spot.swell.components.primary.direction)}\"></div>\n                                <span class=\"ml-small\">${spot.swell.components.primary.compassDirection}</span>\n                            </div>\n                            <div class=\"secswell-size\">${spot.swell.components.secondary ? spot.swell.components.secondary.height + `${spot.swell.unit}` : ''}</div>\n                            <div class=\"secswell-period\">${spot.swell.components.secondary ? spot.swell.components.secondary.period + 's' : ''}</div>\n                            <div class=\"secswell-direction font-small\">\n                                <div class=\"icon msw-swa msw-swa-${spot.swell.components.secondary ? round5(spot.swell.components.secondary.direction) : ''}\"></div>\n                                <span class=\"ml-small\">${spot.swell.components.secondary ? spot.swell.components.secondary.compassDirection : ''}</span>\n                            </div>\n                            <div class=\"wind\">${spot.wind.speed}${spot.wind.unit}</div>\n                            <div class=\"wind-direction\">\n                                <div class=\"icon msw-ssa msw-ssa-${round5(spot.wind.direction)}\"></div>\n                            </div>\n                            <div class=\"weather-symbol\">\n                                <img src=\"http://cdnimages.magicseaweed.com/30x30/${spot.condition.weather}.png\" class=\"weather-icon\">\n                            </div>\n                            <div class=\"weather-condition\">${spot.condition.temperature}${spot.condition.unit}</div>\n                        </div>\n                        <div class=\"forecast__expand\">\n                            &or; View More &or;\n                        </div>\n                    </div>\n                    <div class=\"forecast__extended\" id=\"extended\">\n                    </div>\n                </div>\n                `;\n            \n            // Add to the list if the list is empty\n            if(forecastsList.innerHTML === '') {\n                forecastsList.insertAdjacentHTML('afterbegin', forecast);\n            } else {\n                // If the list is not empty add the forecast element to below existing elements\n                forecastsList.insertAdjacentHTML('beforeend', forecast);                            \n            }\n\n        } else {\n            let forecast = \n                `<div class=\"forecast__info\">\n                    <div class=\"date\">${hrs} ${month}/${day}</div>\n                    <div class=\"swell-size\">${spot.swell.minBreakingHeight}-${spot.swell.maxBreakingHeight}${spot.swell.unit}</div>\n                    <div class=\"rating\">${stars}</div>\n                    <div class=\"pswell-size\">${spot.swell.components.primary.height}${spot.swell.unit}</div>\n                    <div class=\"pswell-period\">${spot.swell.components.primary.period}s</div>\n                    <div class=\"pswell-direction font-small\">\n                        <div class=\"icon msw-swa msw-swa-${round5(spot.swell.components.primary.direction)}\"></div>\n                        <span class=\"ml-small\">${spot.swell.components.primary.compassDirection}</span>\n                    </div>\n                    <div class=\"secswell-size\">${spot.swell.components.secondary ? spot.swell.components.secondary.height + `${spot.swell.unit}` : ''}</div>\n                    <div class=\"secswell-period\">${spot.swell.components.secondary ? spot.swell.components.secondary.period + 's' : ''}</div>\n                    <div class=\"secswell-direction font-small\">\n                        <div class=\"icon msw-swa msw-swa-${spot.swell.components.secondary ? round5(spot.swell.components.secondary.direction) : ''}\"></div>\n                        <span class=\"ml-small\">${spot.swell.components.secondary ? spot.swell.components.secondary.compassDirection : ''}</span>\n                    </div>\n                    <div class=\"wind\">${spot.wind.speed}${spot.wind.unit}</div>\n                    <div class=\"wind-direction\">\n                        <div class=\"icon msw-ssa msw-ssa-${round5(spot.wind.direction)}\"></div>\n                    </div>\n                    <div class=\"weather-symbol\">\n                        <img src=\"http://cdnimages.magicseaweed.com/30x30/${spot.condition.weather}.png\" class=\"weather-icon\">\n                    </div>\n                    <div class=\"weather-condition\">${spot.condition.temperature}${spot.condition.unit}</div>\n                </div>`\n            \n            // Select all forecast elements in the forecast list\n            let forecasts = forecastsList.querySelectorAll('.forecast');\n            // Create an array of exisitng forecast elements\n            let forecastsArr = Array.from(forecasts);\n            //Add the forecast to the last array item's forecast__extended element\n            forecastsArr[forecastsArr.length - 1].lastElementChild.innerHTML += forecast;\n        }\n        \n        // Change the background color of the wind icons\n        let windSpeeds = document.querySelectorAll('.wind');\n        windSpeeds.forEach(windSpeed => {\n            ui.windSpeedColor(windSpeed)\n        });\n    }\n}\n\nfunction renderWeather(data) {\n    const iconName = data.icon,\n          iconURL = data.icon_url,\n          tempF = data.temp_f,\n          tempC = data.temp_c,\n          location = data.display_location.city;\n\n    currentConditions = `\n        <div class=\"weather-widget__weather\">\n            <img src=\"${iconURL}\" alt=\"weather icon\"><img>\n            <div class=\"weather-widget__weather--info\">\n                <div class=\"weather-widget__weather--info-temp temp-f\">${tempF}f</div>\n                <div class=\"weather-widget__weather--info-temp temp-c display-none\">${tempC}c</div>\n                <div class=\"weather-widget__weather--info-location\">${location}</div>\n            </div>\n            <i class=\"material-icons\" style=\"font-size: 15px;\">mode_edit</i>\n        </div>\n    `;\n    if(weatherWidget.firstElementChild.innerHTML === '') {\n        weatherWidget.firstElementChild.innerHTML = currentConditions; \n    } else {\n        weatherWidget.firstElementChild.innerHTML = '';\n        weatherWidget.firstElementChild.innerHTML = currentConditions; \n    }\n    \n    submitWeather.classList.toggle('display-none');\n    weatherInput.placeholder = \"Change Location\";\n}\n\nfunction retrieveDataFromLS(){\n    weatherData.forEach(cityState => {\n        weather.getWeather(cityState.state, cityState.city)\n            .then(results => {\n                renderWeather(results);\n            });\n    });\n\n    locationData.forEach(location => {\n        forecast.getSpot(location.spotId)\n            .then(data => {\n                populateForecastList(location.name, data);\n            }) ;\n    });\n}\n\n\n// Functions for starting the time \nfunction startTime() {\n    let today = new Date(),\n        hrs = today.getHours(),\n        mins = today.getMinutes(),\n        secs = today.getSeconds(),\n        hh = hrs;\n\n    if (hrs > 12) {\n        hrs = hh - 12;\n    }\n    if (hrs == 0) {\n        hrs = 12;\n    }\n    \n    mins = checkTime(mins);\n    document.getElementById('time').innerHTML = `${hrs}:${mins}`;\n\n    var t = setTimeout(startTime, 500);\n}\n\n// function to round wind and swell arrows to the nearest 5\nfunction round5(x)\n{\n    return Math.ceil(x/5)*5;\n}\n\n//Add 0 in front of minutes\nfunction checkTime(i) {\n    if (i < 10) {i = `0${i}`};  // add zero in front of numbers < 10\n    return i;\n}\n\n// Check whether it is am or pm\nfunction checkHour(hour) {\n    var hour = hour - 1;\n    var amPM = (hour > 11) ? \"am\" : \"pm\";\n    if(hour > 12) {\n      hour -= 12;\n    } else if(hour == 0) {\n      hour = \"12\";\n    }\n    return hour + amPM;\n}\n\n\nfunction loadEventListeners() {\n    submitWeather.addEventListener('submit', getWeather);\n    weatherForecast.addEventListener('click', changeUnits);\n    weatherForecast.addEventListener('click', toggleChangelocation);    \n    submitForecast.addEventListener('click', addForecast);\n    forecastsList.addEventListener('click', removeSpot);\n    forecastsList.addEventListener('click', toggleForecast);\n    questionMark.addEventListener('click', showInformation);\n}\n\n\n//Remove each forecast from the forecast list\nfunction removeSpot(e) {\n    if(e.target.classList.contains('forecast__delete')) {\n        //select the parent element with class of forecast\n        e.target.parentNode.parentNode.parentNode.parentNode.remove();\n        // selest the name submitted for the spot to locate index in local storage\n        removeFromLocalStorage(e.target.parentElement.previousSibling.previousSibling.textContent);\n    }\n}\n\n// Toggle the extended forecast open and closed\nfunction toggleForecast(e) {\n    if(e.target.classList.contains('forecast__expand')){\n        if(toggled === false) {\n            e.target.parentNode.nextElementSibling.style.display = \"inline\";\n            e.target.innerHTML = \"&and; View Less &and;\"\n            toggled = true;\n        }\n        else if(toggled === true) {\n            e.target.parentNode.nextElementSibling.style.display = \"none\";\n            e.target.innerHTML = \"&or; View More &or;\"            \n            toggled = false;\n        }\n    }\n}\n\n// Remove forecast from local storage\nfunction removeFromLocalStorage(name) {\n    locationData.forEach((location, i) => {\n        if(location.name === name) {\n            locationData.splice(i, 1);\n        }\n    });\n\n    localStorage.setItem('locationData', JSON.stringify(locationData));\n}\n\nfunction showInformation(e) {\n    infoBox.classList.toggle('visible');\n    triangle.classList.toggle('visible');\n}\n\nfunction changeUnits(e) {\n    const tempF = document.querySelector('.temp-f');\n    const tempC = document.querySelector('.temp-c');\n\n    if(e.target.classList.contains('weather-widget__weather--info-temp')) {\n        tempF.classList.toggle('display-none');\n        tempC.classList.toggle('display-none');\n    }\n}\n\nfunction toggleChangelocation(e) {\n    if(e.target.classList.contains('material-icons')) {\n        submitWeather.classList.toggle('display-none');\n    }\n}\n\nfunction createErrorMessage(msg) {\n    msg =  `<div class=\"error-message\">${msg}</div>`;\n    return msg;\n}\n\n\n// WEBPACK FOOTER //\n// ./js/app.js"],"sourceRoot":""}